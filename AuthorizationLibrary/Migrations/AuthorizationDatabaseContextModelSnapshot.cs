// <auto-generated />
using System;
using AuthorizationLibrary.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthorizationLibrary.Migrations
{
    [DbContext(typeof(AuthorizationDatabaseContext))]
    partial class AuthorizationDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Authorization")
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorizationLibrary.Models.AuthorizationProviders.AuthorizationProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("discriminator");

                    b.Property<long>("UserCredentialId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_credential_id");

                    b.HasKey("Id")
                        .HasName("pk_authorization_provider");

                    b.HasIndex("UserCredentialId")
                        .IsUnique()
                        .HasDatabaseName("ix_authorization_provider_user_credential_id");

                    b.ToTable("AuthorizationProvider", "Authorization");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AuthorizationProvider");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("AuthorizationLibrary.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("additional_info");

                    b.Property<DateTime>("LastEnteredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_entered_at");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(65)
                        .HasColumnType("character varying(65)")
                        .HasColumnName("name");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTimeOffset>("RefreshTokenExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiration_date");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("second_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("Users", "Authorization");
                });

            modelBuilder.Entity("AuthorizationLibrary.Models.UserCredential", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)")
                        .HasColumnName("email");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_credentials");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_credentials_email");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_credentials_user_id");

                    b.ToTable("Credentials", "Authorization");
                });

            modelBuilder.Entity("AuthorizationLibrary.Models.AuthorizationProviders.ExternalAuthorizationProvider", b =>
                {
                    b.HasBaseType("AuthorizationLibrary.Models.AuthorizationProviders.AuthorizationProvider");

                    b.Property<int>("AuthorizationType")
                        .HasColumnType("integer")
                        .HasColumnName("authorization_type");

                    b.Property<string>("OAuthClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("o_auth_client_id");

                    b.Property<string>("OAuthToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("o_auth_token");

                    b.HasDiscriminator().HasValue("ExternalAuthorizationProvider");
                });

            modelBuilder.Entity("AuthorizationLibrary.Models.AuthorizationProviders.PasswordAuthorizationProvider", b =>
                {
                    b.HasBaseType("AuthorizationLibrary.Models.AuthorizationProviders.AuthorizationProvider");

                    b.Property<DateTime?>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_time");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasDiscriminator().HasValue("PasswordAuthorizationProvider");
                });

            modelBuilder.Entity("AuthorizationLibrary.Models.AuthorizationProviders.AuthorizationProvider", b =>
                {
                    b.HasOne("AuthorizationLibrary.Models.UserCredential", null)
                        .WithOne("AuthorizationProviders")
                        .HasForeignKey("AuthorizationLibrary.Models.AuthorizationProviders.AuthorizationProvider", "UserCredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_authorization_provider_credentials_user_credential_id");
                });

            modelBuilder.Entity("AuthorizationLibrary.Models.UserCredential", b =>
                {
                    b.HasOne("AuthorizationLibrary.Models.User", "User")
                        .WithMany("Credentials")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_credentials_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthorizationLibrary.Models.User", b =>
                {
                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("AuthorizationLibrary.Models.UserCredential", b =>
                {
                    b.Navigation("AuthorizationProviders")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
